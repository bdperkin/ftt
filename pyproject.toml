# FTT - File Type Tester
# Copyright (c) 2025 Brandon Perkins
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ftt"
dynamic = ["version"]
description = "File Type Tester - A modern Python tool for classifying files"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Brandon Perkins", email = "bdperkin@gmail.com"}
]
keywords = ["file", "type", "classification", "magic", "detection"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Filesystems",
    "Topic :: Utilities",
]
dependencies = [
    "importlib-metadata>=1.0; python_version<'3.8'"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "flake8>=6.0",
    "flake8-pyproject>=1.0",
    "mypy>=1.0",
    "lxml>=4.0",
    "isort>=5.0",
    "bandit>=1.7",
    "pre-commit>=3.0",
]

[project.scripts]
ftt = "ftt.cli:main"

[project.urls]
Homepage = "https://github.com/bdperkin/ftt"
Repository = "https://github.com/bdperkin/ftt"
Issues = "https://github.com/bdperkin/ftt/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.dynamic]
version = {attr = "ftt._version.__version__"}

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | htmlcov
)/
'''
preview = false

[tool.mypy]
# Python version compatibility
python_version = "3.8"

# Import discovery
files = ["src", "tests", "scripts"]
mypy_path = ["src"]
namespace_packages = true

# Platform configuration
platform = "linux"

# Strictness settings
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_any_unimported = true

# Warning settings
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Error output
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Miscellaneous
strict_equality = true
strict_concatenate = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "importlib_metadata",
    "importlib_metadata.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests", "scripts"]
known_first_party = ["ftt"]
known_third_party = ["pytest", "pathlib"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
force_sort_within_sections = true

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503", "W504"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    ".eggs",
    "*.egg",
    "build",
    "dist",
    "htmlcov",
    ".pytest_cache",
    ".mypy_cache",
    ".tox",
    ".coverage",
    "*.egg-info",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]
max-complexity = 20
docstring-convention = "google"
statistics = true
count = true
show-source = true
verbose = 1

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=ftt",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-branch",
    "--cov-fail-under=50",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/.venv/*",
    "src/ftt/_version.py",
    "src/ftt/cli.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.bandit]
# Bandit security scanner configuration
# Note: Some options like per-file skips work better via command-line flags

# Target directories for security scanning (src only for production code)
targets = ["src", "scripts"]

# Confidence levels: LOW, MEDIUM, HIGH
confidence = "MEDIUM"

# Severity levels: LOW, MEDIUM, HIGH
severity = "MEDIUM"

# Output format: json, txt, html, xml, csv, screen, yaml
format = "screen"

# Exclude directories
exclude_dirs = [
    ".git",
    ".venv",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
    "htmlcov",
    "*.egg-info",
    "tests",  # Exclude test directory entirely
]

# Skip specific test IDs globally
skips = [
    "B101",  # assert_used - Allow asserts (mainly for scripts/demos)
    "B603",  # subprocess_without_shell_equals_true - We explicitly use shell=False
]

# Additional bandit configuration
recursive = true
aggregate = "file"
number_of_lines_of_context = 3
