# Tox configuration for FTT (File Type Tester)
# This file provides comprehensive testing environments for multiple Python versions
# and various quality assurance tools.
# Now enhanced with tox-uv for ultra-fast dependency installation and environment creation.

[tox]
min_version = 4.0
env_list =
    py{38,39,310,311,312,313}
    uv-py{38,39,310,311,312,313}
    lint
    uv-lint
    type
    uv-type
    security
    coverage
    uv-coverage
    docs
isolated_build = true
skip_missing_interpreters = true

# Standard tox environments (using pip/virtualenv)
[testenv]
description = Run tests with pytest
package = wheel
wheel_build_env = .pkg
deps =
    pytest>=7.0
    pytest-cov>=4.0
commands =
    pytest {posargs}

[testenv:py{38,39,310,311,312,313}]
description = Run tests on Python {basepython}
package = editable
deps =
    {[testenv]deps}
commands =
    pytest --cov=src/ftt --cov-report=term-missing --cov-fail-under=50 {posargs}

# UV-enhanced environments (using tox-uv for speed)
# Note: tox-uv requires Python 3.9+, so uv-py38 will fallback to standard runner
[testenv:uv-py{38,39,310,311,312,313}]
description = Run tests on Python {basepython} with UV backend (10-100x faster)
runner = uv-venv-runner
package = editable
deps =
    pytest>=7.0
    pytest-cov>=4.0
commands =
    pytest --cov=src/ftt --cov-report=term-missing --cov-fail-under=50 {posargs}

[testenv:uv-lint]
description = Run linting tools with UV backend (black, isort, flake8)
runner = uv-venv-runner
skip_install = true
deps =
    black>=23.0
    isort>=5.0
    flake8>=6.0
    flake8-pyproject>=1.0
commands =
    black --check --diff src tests scripts
    isort --check-only --diff src tests scripts
    flake8 src tests scripts

[testenv:uv-type]
description = Run type checking with mypy using UV backend
runner = uv-venv-runner
deps =
    mypy>=1.0
    lxml>=4.0
    types-setuptools
    pytest>=7.0
commands =
    mypy src tests scripts

[testenv:uv-coverage]
description = Run tests with full coverage reporting using UV backend
runner = uv-venv-runner
package = editable
deps =
    pytest>=7.0
    pytest-cov>=4.0
commands =
    pytest --cov=src/ftt --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=50

[testenv:uv-security]
description = Run security checks with bandit using UV backend
runner = uv-venv-runner
skip_install = true
deps =
    bandit>=1.7
commands =
    bandit -r src -f json -o bandit-report.json
    bandit -r src

[testenv:uv-all]
description = Run all quality checks and tests with UV backend
runner = uv-venv-runner
package = editable
deps =
    pytest>=7.0
    pytest-cov>=4.0
    black>=23.0
    isort>=5.0
    flake8>=6.0
    flake8-pyproject>=1.0
    mypy>=1.0
    lxml>=4.0
    types-setuptools
    bandit>=1.7
commands =
    black --check --diff src tests scripts
    isort --check-only --diff src tests scripts
    flake8 src tests scripts
    mypy src tests scripts
    bandit -r src
    pytest --cov=src/ftt --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=50

[testenv:uv-dev]
description = Development environment with all tools using UV backend
runner = uv-venv-runner
deps =
    pytest>=7.0
    pytest-cov>=4.0
    black>=23.0
    flake8>=6.0
    flake8-pyproject>=1.0
    mypy>=1.0
    lxml>=4.0
    isort>=5.0
    bandit>=1.7
    pre-commit>=3.0
commands =
    python -c "print('UV Development environment ready!')"
    python -c "import ftt; print(f'FTT version: {ftt.__version__}')"
    python -c "print('Available tox environments:')"
    tox -l

[testenv:uv-quick]
description = Quick test run with UV backend (no coverage)
runner = uv-venv-runner
deps =
    pytest>=7.0
commands =
    pytest --tb=short -o addopts="" {posargs}

[testenv:uv-verbose]
description = Verbose test run with detailed output using UV backend
runner = uv-venv-runner
package = editable
deps =
    pytest>=7.0
    pytest-cov>=4.0
commands =
    pytest -v --cov=src/ftt --cov-report=term-missing --cov-report=html {posargs}

[testenv:uv-benchmark]
description = Benchmark UV vs pip performance
runner = uv-venv-runner
skip_install = true
deps =
    pytest>=7.0
    pytest-cov>=4.0
    black>=23.0
    flake8>=6.0
    mypy>=1.0
allowlist_externals =
    echo
    time
commands =
    echo "=== UV Backend Performance Test ==="
    time python -c "import pytest, black, flake8, mypy; print('All packages imported successfully')"
    echo "UV environment creation and dependency installation completed"

# Standard environments (continued)
[testenv:lint]
description = Run linting tools (black, isort, flake8)
skip_install = true
deps =
    black>=23.0
    isort>=5.0
    flake8>=6.0
    flake8-pyproject>=1.0
commands =
    black --check --diff src tests scripts
    isort --check-only --diff src tests scripts
    flake8 src tests scripts

[testenv:format]
description = Format code with black and isort
skip_install = true
deps =
    black>=23.0
    isort>=5.0
commands =
    black src tests scripts
    isort src tests scripts

[testenv:type]
description = Run type checking with mypy
deps =
    mypy>=1.0
    lxml>=4.0
    types-setuptools
    pytest>=7.0
commands =
    mypy src tests scripts

[testenv:security]
description = Run security checks with bandit
skip_install = true
deps =
    bandit>=1.7
commands =
    bandit -r src -f json -o bandit-report.json
    bandit -r src

[testenv:coverage]
description = Run tests with full coverage reporting
package = editable
deps =
    pytest>=7.0
    pytest-cov>=4.0
commands =
    pytest --cov=src/ftt --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=50

[testenv:docs]
description = Build documentation (placeholder for future docs)
skip_install = true
deps =
    sphinx>=5.0
    sphinx-rtd-theme>=1.0
allowlist_externals = echo
commands =
    echo "Documentation build placeholder - implement when docs are added"
    echo "To add docs: create docs/ directory with conf.py and index.rst"

[testenv:clean]
description = Clean up build artifacts and cache files
skip_install = true
allowlist_externals =
    rm
    find
commands =
    rm -rf build/
    rm -rf dist/
    rm -rf src/*.egg-info/
    rm -rf .pytest_cache/
    rm -rf .mypy_cache/
    rm -rf .coverage
    rm -rf htmlcov/
    rm -rf coverage.xml
    rm -rf bandit-report.json
    find . -type d -name __pycache__ -exec rm -rf {} +
    find . -type f -name "*.pyc" -delete

[testenv:build]
description = Build wheel and source distribution
skip_install = true
deps =
    build>=0.10
    twine>=4.0
commands =
    python -m build
    twine check dist/*

[testenv:dev]
description = Development environment with all tools
deps =
    {[testenv]deps}
    black>=23.0
    flake8>=6.0
    flake8-pyproject>=1.0
    mypy>=1.0
    lxml>=4.0
    isort>=5.0
    bandit>=1.7
    pre-commit>=3.0
commands =
    python -c "print('Development environment ready!')"
    python -c "import ftt; print(f'FTT version: {ftt.__version__}')"
    python -c "print('Available tox environments:')"
    tox -l

[testenv:all]
description = Run all quality checks and tests
package = editable
deps =
    {[testenv:coverage]deps}
    {[testenv:lint]deps}
    {[testenv:type]deps}
    {[testenv:security]deps}
commands =
    {[testenv:lint]commands}
    {[testenv:type]commands}
    {[testenv:security]commands}
    {[testenv:coverage]commands}

[testenv:quick]
description = Quick test run (no coverage)
deps =
    pytest>=7.0
commands =
    pytest --tb=short -o addopts="" {posargs}

[testenv:verbose]
description = Verbose test run with detailed output
package = editable
deps =
    {[testenv]deps}
commands =
    pytest -v --cov=src/ftt --cov-report=term-missing --cov-report=html {posargs}

# Environment for testing specific Python versions
[testenv:py38-test]
basepython = python3.8
description = Test specifically on Python 3.8
package = editable
deps = {[testenv]deps}
commands = {[testenv:py{38,39,310,311,312,313}]commands}

[testenv:py39-test]
basepython = python3.9
description = Test specifically on Python 3.9
package = editable
deps = {[testenv]deps}
commands = {[testenv:py{38,39,310,311,312,313}]commands}

[testenv:py310-test]
basepython = python3.10
description = Test specifically on Python 3.10
package = editable
deps = {[testenv]deps}
commands = {[testenv:py{38,39,310,311,312,313}]commands}

[testenv:py311-test]
basepython = python3.11
description = Test specifically on Python 3.11
package = editable
deps = {[testenv]deps}
commands = {[testenv:py{38,39,310,311,312,313}]commands}

[testenv:py312-test]
basepython = python3.12
description = Test specifically on Python 3.12
package = editable
deps = {[testenv]deps}
commands = {[testenv:py{38,39,310,311,312,313}]commands}

[testenv:py313-test]
basepython = python3.13
description = Test specifically on Python 3.13
package = editable
deps = {[testenv]deps}
commands = {[testenv:py{38,39,310,311,312,313}]commands}
