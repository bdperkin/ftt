# FTT - File Type Tester CI/CD Pipeline
# Copyright (c) 2025 Brandon Perkins
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install package with dev dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Verify pytest installation
      run: |
        which pytest
        pytest --version

    - name: Run tests with coverage
      run: |
        pytest --cov=src/ftt --cov-report=term-missing --cov-report=xml --cov-fail-under=50

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-

    - name: Install package with dev dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Check import sorting with isort
      run: isort --check-only --diff src tests scripts

    - name: Check code formatting with black
      run: black --check --diff src tests scripts

    - name: Lint with flake8
      run: flake8 src tests scripts

    - name: Type check with mypy
      run: mypy src tests scripts

    - name: Security scan with bandit
      run: bandit -r -s B101 src scripts

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-precommit-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-precommit-
          ${{ runner.os }}-pip-

    - name: Install package with dev dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pre-commit

    - name: Cache pre-commit hooks
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-precommit-

    - name: Run pre-commit hooks
      run: pre-commit run --all-files

  tox:
    name: Tox Multi-Environment Testing
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tox-env: [py38, py39, py310, py311, py312, py313, lint, type, security, coverage]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python for tox
      uses: actions/setup-python@v5
      with:
        python-version: |
          3.8
          3.9
          3.10
          3.11
          3.12
          3.13

    - name: Cache tox environments
      uses: actions/cache@v4
      with:
        path: .tox
        key: ${{ runner.os }}-tox-${{ matrix.tox-env }}-${{ hashFiles('pyproject.toml', 'tox.ini') }}
        restore-keys: |
          ${{ runner.os }}-tox-${{ matrix.tox-env }}-
          ${{ runner.os }}-tox-

    - name: Install tox
      run: |
        python -m pip install --upgrade pip
        pip install tox

    - name: Run tox environment
      run: tox -e ${{ matrix.tox-env }}

    - name: Upload coverage (if coverage env)
      if: matrix.tox-env == 'coverage'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: tox-coverage
        name: tox-coverage
        fail_ci_if_error: false

  tox-uv:
    name: Tox-UV Integration Testing
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Only test on Python 3.9+ since tox-uv requires Python 3.9+
        tox-env: [uv-py39, uv-py310, uv-py311, uv-py312, uv-py313, uv-lint, uv-type, uv-coverage, uv-all]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python for tox-uv
      run: |
        uv python install 3.8 3.9 3.10 3.11 3.12 3.13

    - name: Sync dependencies with tox-uv
      run: uv sync --dev

    - name: Cache tox-uv environments
      uses: actions/cache@v4
      with:
        path: .tox
        key: ${{ runner.os }}-tox-uv-${{ matrix.tox-env }}-${{ hashFiles('pyproject.toml', 'tox.ini', 'uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-tox-uv-${{ matrix.tox-env }}-
          ${{ runner.os }}-tox-uv-

    - name: Run tox-uv environment
      run: uv run tox -e ${{ matrix.tox-env }}

    - name: Upload tox-uv coverage
      if: matrix.tox-env == 'uv-coverage'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: tox-uv-coverage
        name: tox-uv-coverage
        fail_ci_if_error: false

    - name: Performance benchmark
      if: matrix.tox-env == 'uv-py311'
      run: |
        echo "=== Tox-UV Performance Benchmark ==="
        time uv run tox -e uv-quick
        echo "=== Standard Tox Performance ==="
        time uv run tox -e quick

  uv:
    name: UV Testing
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Sync dependencies
      run: uv sync --dev

    - name: Run tests with uv
      run: uv run pytest --cov=src/ftt --cov-report=term-missing --cov-report=xml --cov-fail-under=50

    - name: Run quality checks with uv
      if: matrix.python-version == '3.11'
      run: |
        uv run black --check --diff src tests scripts
        uv run isort --check-only --diff src tests scripts
        uv run flake8 src tests scripts
        uv run mypy src tests scripts
        uv run bandit -r -s B101 src scripts

    - name: Build with uv
      if: matrix.python-version == '3.11'
      run: uv build

    - name: Upload uv coverage
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: uv-tests
        name: uv-coverage
        fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
